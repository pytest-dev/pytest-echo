[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs>=0.4",
  "hatchling>=1.25",
]

[project]
name = "pytest-echo"
description = "pytest plugin that allows to dump environment variables, package version and generic attributes"
readme = "README.md"
keywords = [
  "echo",
  "pytest",
]
license.file = "LICENSE"

maintainers = [
  { name = "Stefano Apostolico", email = "s.apostolico@gmail.com" },
]
requires-python = ">=3.8"

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = [
  "version",
]
dependencies = [
  "pytest>=8.3.3",
  "tomli>=2.0.1; python_version<'3.11'",
]

urls.Homepage = "https://github.com/pytest-dev/pytest-echo"
urls.Source = "https://github.com/pytest-dev/pytest-echo"
urls.Tracker = "https://github.com/pytest-dev/pytest-echo/issues"
entry-points.pytest11.echo = "pytest_echo.plugin"

[dependency-groups]
dev = [
  "covdefaults>=2.3",
  "coverage>=7.6.1",
  "mkdocs>=1.6.1",
  "mkdocs-include-markdown-plugin>=6.2.2",
  "mypy>=1.14.1",
  "pdbpp>=0.10.3",
  "pre-commit",
  "pytest>=8.3.4",
  "pytest-mock>=3.14",
  "ruff>=0.9.4",
  "tox>=4.24.1",
]
docs = [
  "mkdocs>=1.6.1",
  "mkdocs-include-markdown-plugin>=6.2.2",
]

[tool.hatch]
build.hooks.vcs.version-file = "src/pytest_echo/version.py"
version.source = "vcs"

[tool.ruff]
target-version = "py38"
line-length = 120
format.preview = true
format.docstring-code-line-length = 100
format.docstring-code-format = true
lint.select = [
  "ALL",
]
lint.ignore = [
  "ANN401",  # allow Any as type annotation
  "COM812",  # Conflict with formatter
  "CPY",     # No copyright statements
  "D203",    # `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible
  "D212",    # `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible
  "DOC201",  #  return` is not documented in docstring
  "DOC501",  #  Raised exception `AttributeError` missing from docstring
  "ISC001",  # Conflict with formatter
  "PLR1736", # [*] List index lookup in `enumerate()` loop
  "S104",    # Possible binding to all interface
]
lint.per-file-ignores."docs/conf.py" = [
  "A001",   #
  "D100",   #
  "ERA001", #
  "INP001", #
]
lint.per-file-ignores."tests/**/*.py" = [
  "D",       # don"t care about documentation in tests
  "FBT",     # don"t care about booleans as positional arguments in tests
  "INP001",  # no implicit namespace
  "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
  "S101",    # asserts allowed in tests...
  "S603",    # `subprocess` call: check for execution of untrusted input
]
lint.isort = { known-first-party = [ "pytest_echo" ], required-imports = [
  "from __future__ import annotations",
] }

lint.preview = true

[tool.pyproject-fmt]
max_supported_python = "3.13"

[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = [
  "src",
  "tests",
]

[tool.coverage]
run.source = [
  "pytest_echo",
]
run.dynamic_context = "test_function"
run.branch = true
run.parallel = true
run.plugins = [
  "covdefaults",
]
report.fail_under = 90
report.show_missing = true
html.show_contexts = true
html.skip_covered = false
paths.source = [
  "src",
  ".tox*/*/lib/python*/site-packages",
  ".tox*/pypy*/site-packages",
  ".tox*\\*\\Lib\\site-packages",
  "*/src",
  "*\\src",
]

[tool.mypy]
python_version = "3.11"
show_error_codes = true
strict = true

[tool.uv]
package = true
